#!/usr/bin/env perl
use strict;
use warnings;

use IO::Uncompress::Gunzip; # Core module

## Last Modified July 25th, 2018 by Christopher Bottoms

## Citation:
## Khalid K. Alam, Jonathan L. Chang & Donald H. Burke.
## FASTAptamer: A Bioinformatic Toolkit for High-Throughput Sequence Analysis of
## Combinatorial Selections. Molecular Therapy -- Nucleic Acids. 2015.
## DOI: 10.1038/mtna.2015.4

## Distributed under GNU General Public License v3

use Getopt::Long;    ## Core Perl module for command line arguments/options

#################################
## Command line                 #
#################################

my $start = time;    ## Starts program execution timer
my $input_filename;  ## Input file name
my $output_filename; ## Output file name
my $quiet;           ## true/false variable for summary report supression
my $csv_filename;    ## file name for outputting CSV file (optional)
my $help;            ## true/false variable for help screen
my $version;         ## true/false variable for version screen
my $fasta;           ## input is in FASTA format
my $unique;          ## true/false variable for creating unique sequence IDs
                                             ## Take command line arguments for...
GetOptions (    "input=s"  => \$input_filename,  ## ...input file
                "output=s" => \$output_filename, ## ...output file
                "quiet"    => \$quiet,           ## ...supressing std. out
                "version"  => \$version,         ## ...showing version screen
                "fasta"    => \$fasta,           ## ...format of input file is FASTA
                "csv=s"    => \$csv_filename,    ## ...output CSV file too
                "unique"   => \$unique,          ## ...creating unique seq IDs
                "help"     => \$help);           ## ...showing help screen

if (defined $help){                           ## Print help screen if -h is true
    print <<"HELP";

--------------------------------------------------------------------------------
                               FASTAptamer-Count
--------------------------------------------------------------------------------

Usage: fastaptamer_count [-h] [-q] [-v] [-i INFILE] [-o OUTFILE]

    [-h]            = Help screen.
    [-q]            = Suppress STDOUT of run report.
    [-v]            = Display version.
    [-i INFILE]     = input file. REQUIRED (FASTQ unless -f specified).
    [-o OUTFILE]    = FASTA output file. REQUIRED.
    [-f ]           = input file is in FASTA format (otherwise it must be FASTQ)
    [-c CSV_OUT]    = output CSV format (to file CSV_OUT)
    [-u ]           = Create unique sequence ID's

FASTAptamer-Count serves as the gateway to the FASTAptamer toolkit.  For a given
.FASTQ input file (or FASTA input file if the -f flag is used), FASTAptamer-Cou-
nt will determine the number of times each sequence was read, rank and sort seq-
uences by decreasing total reads, and normalize sequence frequency to reads per
million. Output is generated as a non-redundant FASTA file in the following for-
mat for each sequence:

    >RANK-READS-RPM
    SEQUENCE

Where RANK is the relative abundance of the sequence within the population. In
cases where two or more sequences are sampled with equal abundance, FASTAptamer-
Count follows standard competition ranking (e.g., "1-2-2-4" where two sequences
are tied for second).  READS is the raw number of times a sequence was counted.
RPM is "Reads per million," which is a normalized value that allows for compari-
son across populations of varying read depth. RPM is calculated as:

	RPM = (READS/(population size)) x 10^6.

In addition to generating a FASTA output file, FASTAptamer-Count will display a
summary report on the screen (STDOUT) that includes the number of total reads f-
ound in the input file, the number of unique sequences, the file input/output n-
ames and the program execution time. The  summary report can be suppressed by i-
ncluding the optional flag [-q] on the command line.

If the -u flag is used, the FASTA file will have the following format (starting
at the second sequence that has the same rank):

        >RANK(UNIQ)-READS-RPM
        SEQUENCE

Where UNIQ is a numeric label that distinguishes sequences with identical
RANK and READS (and therefore identical RPM too). This label starts at '2' and
increments by one for each new sequence that has the same RANK. This label is r-
eset each time RANK increases.

Summary report (total reads, unique reads, and execution time) is displayed as
STDOUT at program completion unless [-q] is invoked.

If a CSV output filename is given, then a csv file is output with the columns
"rank,sequence,count,cpm,percent".
HELP
exit;
}

if (defined $version){                     ## Print version screen if -v is true
    print <<"VERSION";

FASTAptamer v1.0.16

VERSION
exit;
}

##########################################
## Open input file or exit with warning  #
##########################################

my $fh_in = open_input($input_filename);

##########################################
## Open output file or exit with warning #
##########################################

my $fh_csv;

if ($csv_filename) {
    open ($fh_csv, '>', $csv_filename) or die "\nCould not open output CSV file\n
See help documentation [-h].\n";

    print $fh_csv "rank,sequence,count,cpm,percent\n";
}

open (my $fh_out, '>', $output_filename) or die
"\nCould not open output file or no output file was specified.\n
See help documentation [-h], README, or User's Guide for program usage.\n";

###############################################
## Create a hash for sequence reads where key #
## is the sequence and value is read count    #
###############################################

my %sequence_reads;

my $entries = 0;    ## Counts the number of entries processed

################################################################################
## Read input file and for each entry, add sequence or increment value in hash #
################################################################################

if (!$fasta){

    # While loop terminates when no more lines can be read from $fh_in
    while (my $seq_header = readline $fh_in){
        my $sequence    = readline $fh_in;
        my $qual_header = readline $fh_in;
        my $qual_scores = readline $fh_in;

        # catch occasional case in which there is an incomplete record
        warn "Record for $seq_header malformed" unless $qual_scores;

        chomp $sequence;
        $sequence_reads{$sequence} += 1;
        $entries++;

        if (index($seq_header,'>') == 0){
            warn "This seems to be a FASTA file, processing it as such\n";

            # capture sequence from "qual scores"
            chomp $qual_scores;
            my $almost_missed_seq = $qual_scores;
            $sequence_reads{$almost_missed_seq}++;
            $entries++;

            # set fasta flag and get out of this loop so that we can
            # process this file as a FASTA
            $fasta = 1;
            last;
        }
    }
}

if ($fasta){
    # While loop terminates when no more lines can be read from $fh_in
    # THIS EXPECTS TWO LINES PER FASTA SEQUENCE
    while (my $seq_header = readline $fh_in){
        my $sequence    = readline $fh_in;
        chomp $sequence;
        $sequence_reads{$sequence} += 1;
        $entries++;
    }
}

close $fh_in;

############################################
## Sort hash by decreasing read count by   #
## converting to arrays of values and keys #
############################################

my @keys = sort { $sequence_reads{$b} <=> $sequence_reads{$a} } keys(%sequence_reads);
my @vals = @sequence_reads{@keys};

##################################################################################
## Using both arrays, print to output the FASTA formatted file containing        #
## the sequence rank, reads, reads per million, and sequence. The extra          #
## scalars here are used to ensure that sequences with equal read counts         #
## receive the same rank value, and that the next untied value is properly       #
## assigned a rank that takes into account the number of tied values before it,  #
## also known as standard competition ranking.                                   #
##################################################################################

my $last_reads_count = 0;

my $rank = 1;

my $uniq_label = 1;
for my $i (0..$#keys){
    my $current_reads_count = $vals[$i];
    my $sequence = $keys[$i];

    # Calculate percent and counts per million
    my $percent = ($current_reads_count/$entries) * 100;
    my $cpm = $percent * 10000;

    # Unpack sequence and count
    if ($current_reads_count != $last_reads_count){

        # New rank, so increment rank, and reset unique label
        $rank       = $i + 1;
        $uniq_label = 1;

        print $fh_out ">$rank";
        print $fh_out "-$current_reads_count-";
        printf $fh_out "%.2f", $cpm;
        print $fh_out "\n";
        print $fh_out "$sequence\n";
        if ($csv_filename) {
            print $fh_csv join(",",
                               $rank,
                               $sequence,
                               $current_reads_count,
                               $cpm,
                               $percent);
            print $fh_csv "\n";
        }
    }
    elsif ($current_reads_count == $last_reads_count){
        my $rank_label = $rank;

        # Old rank, so increment unique label
        $uniq_label++;

        # Append unique label if requested
        if ($unique) {
            $rank_label = "$rank($uniq_label)";
        }

        print $fh_out ">$rank_label";
        print $fh_out "-$current_reads_count-";
        printf $fh_out "%.2f", $cpm;
        print $fh_out "\n";
        print $fh_out "$sequence\n";

        if ($csv_filename) {
            print $fh_csv join(",",
                               $rank_label,
                               $sequence,
                               $current_reads_count,
                               $cpm,
                               $percent);
            print $fh_csv "\n";
        }
    }
    # Update last reads count before next iteration
    $last_reads_count = $current_reads_count;
}

close $fh_out;

if ($csv_filename) {
    close $fh_csv;
}

##################################################################################
## Unless the -q option is invoked, the following statistics are printed as      #
## standard output.                                                              #
##################################################################################

unless ($quiet){
    print "\n$entries total sequences.  " . ($#keys + 1) . " unique sequences.\n";
    print "Input file: \"$input_filename\".\n";
    print "Output file: \"$output_filename\".\n";

    my $duration = time - $start;
    print "Execution time: $duration s.\n";
}

exit;

# Open file for reading (as gzipped compressed if name ends in '.gz')
sub open_input {
    my $input_file_error_message =
        "\nCould not open input file or no input file was specified.\n
        See help documentation [-h], README, or User's Guide for program usage.\n";

    my $filename = shift || die $input_file_error_message;

    my $fh;
    if ($filename =~ /\.gz$/xms) {

        $fh = IO::Uncompress::Gunzip->new($filename, MultiStream => 1); # *

        # * MultiStream option makes this decompress more like gunzip would
        # (i.e. a file containing multiple separate gzipped blocks will be
        # completely decompressed into a single file).

    }
    else {
        # Return normal "reading" filehandle
        open($fh, '<', $filename);
    }

    $fh or die $input_file_error_message;

    return $fh;
}
